<?php

declare (strict_types=1);
namespace TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser;

use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprArrayNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprIntegerNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprStringNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstFetchNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Node;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ExtendsTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ImplementsTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PropertyTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasImportTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\UsesTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ArrayTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\CallableTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\CallableTypeParameterNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ConstTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode;
use TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer;
class PhpDocParserTest extends \TenantCloud\BetterReflection\Relocated\PHPUnit\Framework\TestCase
{
    /** @var Lexer */
    private $lexer;
    /** @var PhpDocParser */
    private $phpDocParser;
    protected function setUp() : void
    {
        parent::setUp();
        $this->lexer = new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer();
        $constExprParser = new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ConstExprParser();
        $this->phpDocParser = new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\PhpDocParser(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\TypeParser($constExprParser), $constExprParser);
    }
    /**
     * @dataProvider provideTagsWithNumbers
     * @dataProvider provideParamTagsData
     * @dataProvider provideVarTagsData
     * @dataProvider provideReturnTagsData
     * @dataProvider provideThrowsTagsData
     * @dataProvider provideMixinTagsData
     * @dataProvider provideDeprecatedTagsData
     * @dataProvider providePropertyTagsData
     * @dataProvider provideMethodTagsData
     * @dataProvider provideSingleLinePhpDocData
     * @dataProvider provideMultiLinePhpDocData
     * @dataProvider provideTemplateTagsData
     * @dataProvider provideExtendsTagsData
     * @dataProvider provideTypeAliasTagsData
     * @dataProvider provideTypeAliasImportTagsData
     * @dataProvider provideRealWorldExampleData
     * @dataProvider provideDescriptionWithOrWithoutHtml
     * @param string     $label
     * @param string     $input
     * @param PhpDocNode $expectedPhpDocNode
     * @param int        $nextTokenType
     */
    public function testParse(string $label, string $input, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode $expectedPhpDocNode, int $nextTokenType = \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_END) : void
    {
        $tokens = new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\TokenIterator($this->lexer->tokenize($input));
        $actualPhpDocNode = $this->phpDocParser->parse($tokens);
        $this->assertEquals($expectedPhpDocNode, $actualPhpDocNode, $label);
        $this->assertSame((string) $expectedPhpDocNode, (string) $actualPhpDocNode);
        $this->assertSame($nextTokenType, $tokens->currentTokenType());
    }
    public function provideParamTagsData() : \Iterator
    {
        (yield ['OK without description', '/** @param Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \false, '$foo', ''))])]);
        (yield ['OK with description', '/** @param Foo $foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \false, '$foo', 'optional description'))])]);
        (yield ['OK variadic without description', '/** @param Foo ...$foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \true, '$foo', ''))])]);
        (yield ['OK variadic with description', '/** @param Foo ...$foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \true, '$foo', 'optional description'))])]);
        (yield ['invalid without type, parameter name and description', '/** @param */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 11, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and parameter name and with description (1)', '/** @param #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('#desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 11, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and parameter name and with description (2)', '/** @param (Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 16, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (1)', '/** @param (Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 16, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (2)', '/** @param Foo<Bar $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo<Bar $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 19, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_ANGLE_BRACKET)))])]);
        (yield ['invalid with broken type (3)', '/** @param Foo| $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo| $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 16, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without parameter name and description', '/** @param Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 15, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
        (yield ['invalid without parameter name and with description', '/** @param Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo optional description', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('optional', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER, 15, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
    }
    public function provideVarTagsData() : \Iterator
    {
        (yield ['OK without description and variable name', '/** @var Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '', ''))])]);
        (yield ['OK without description', '/** @var Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', ''))])]);
        (yield ['OK without description and with no space between type and variable name', '/** @var Foo$foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', ''))])]);
        (yield ['OK without variable name', '/** @var Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '', 'optional description'))])]);
        (yield ['OK without variable name and complex description', '/** @var callable[] function (Configurator $sender, DI\\Compiler $compiler); Occurs after the compiler is created */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ArrayTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('callable')), '', 'function (Configurator $sender, DI\\Compiler $compiler); Occurs after the compiler is created'))])]);
        (yield ['OK without variable name and tag in the middle of description', '/** @var Foo @inject */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '', '@inject'))])]);
        (yield ['OK without variable name and description in parentheses', '/** @var Foo (Bar) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '', '(Bar)'))])]);
        (yield ['OK with variable name and description', '/** @var Foo $foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', 'optional description'))])]);
        (yield ['OK without description with variable $this', '/** @var Foo $this */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$this', ''))])]);
        (yield ['OK without description and with no space between type and variable name with variable $this', '/** @var Foo$this */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$this', ''))])]);
        (yield ['OK with description with variable $this', '/** @var Foo $this Testing */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$this', 'Testing'))])]);
        (yield ['OK with description and with no space between type and variable name with variable $this', '/** @var Foo$this Testing */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$this', 'Testing'))])]);
        (yield ['OK with variable name and description and without all optional spaces', '/** @var(Foo)$foo#desc*/', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', '#desc'))])]);
        (yield ['invalid without type, variable name and description', '/** @var */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 9, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and variable name and with description (1)', '/** @var #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('#desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 9, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and variable name and with description (2)', '/** @var (Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (1)', '/** @var (Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (2)', '/** @var Foo<Bar $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo<Bar $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 17, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_ANGLE_BRACKET)))])]);
        (yield ['invalid with broken type (3)', '/** @var Foo| $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo| $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
    }
    public function providePropertyTagsData() : \Iterator
    {
        (yield ['OK without description', '/** @property Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PropertyTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', ''))])]);
        (yield ['OK with description', '/** @property Foo $foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PropertyTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '$foo', 'optional description'))])]);
        (yield ['invalid without type, property name and description', '/** @property */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and property name and with description (1)', '/** @property #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('#desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type and property name and with description (2)', '/** @property (Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 19, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (1)', '/** @property (Foo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('(Foo $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 19, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES)))])]);
        (yield ['invalid with broken type (2)', '/** @property Foo<Bar $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo<Bar $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 22, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_ANGLE_BRACKET)))])]);
        (yield ['invalid with broken type (3)', '/** @property Foo| $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo| $foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('$foo', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE, 19, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without property name and description', '/** @property Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
        (yield ['invalid without property name and with description', '/** @property Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@property', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo optional description', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('optional', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
    }
    public function provideReturnTagsData() : \Iterator
    {
        (yield ['OK without description', '/** @return Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), ''))])]);
        (yield ['OK with description', '/** @return Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'optional description'))])]);
        (yield ['OK with description that starts with TOKEN_OPEN_SQUARE_BRACKET', '/** @return Foo [Bar] */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '[Bar]'))])]);
        (yield ['invalid without type and description', '/** @return */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 12, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without type', '/** @return [int, string] */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('[int, string]', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('[', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OPEN_SQUARE_BRACKET, 12, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid with type and disallowed description start token (1)', '/** @return Foo | #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo | #desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid with type and disallowed description start token (2)', '/** @return A & B | C */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('A & B | C', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('|', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_UNION, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER)))])]);
        (yield ['invalid with type and disallowed description start token (3)', '/** @return A | B & C */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('A | B & C', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('&', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_INTERSECTION, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER)))])]);
        (yield ['invalid with type and disallowed description start token (4)', '/** @return A | B < 123 */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('A | B < 123', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 24, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_ANGLE_BRACKET)))])]);
        (yield ['OK with type and const expr as generic type variable', '/** @return A | B < 123 > */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ConstTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprIntegerNode('123'))])]), ''))])]);
    }
    public function provideThrowsTagsData() : \Iterator
    {
        (yield ['OK without description', '/** @throws Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), ''))])]);
        (yield ['OK with description', '/** @throws Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'optional description'))])]);
        (yield ['OK with description that starts with TOKEN_OPEN_SQUARE_BRACKET', '/** @throws Foo [Bar] */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '[Bar]'))])]);
        (yield ['invalid without type and description', '/** @throws */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 12, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid with type and disallowed description start token', '/** @throws Foo | #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo | #desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
    }
    public function provideMixinTagsData() : \Iterator
    {
        (yield ['OK without description', '/** @mixin Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), ''))])]);
        (yield ['OK with description', '/** @mixin Foo optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'optional description'))])]);
        (yield ['OK with description that starts with TOKEN_OPEN_SQUARE_BRACKET', '/** @mixin Foo [Bar] */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '[Bar]'))])]);
        (yield ['invalid without type and description', '/** @mixin */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 11, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid with type and disallowed description start token', '/** @mixin Foo | #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo | #desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 17, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['generic @mixin', '/** @mixin Foo<Bar> */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), ''))])]);
    }
    public function provideDeprecatedTagsData() : \Iterator
    {
        (yield ['OK with no description', '/** @deprecated */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode(''))])]);
        (yield ['OK with simple description description', '/** @deprecated text string */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('text string'))])]);
        (yield ['OK with two simple description with break', '/** @deprecated text first
        *
        * @deprecated text second
        */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('text first')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('text second'))])]);
        (yield ['OK with two simple description without break', '/** @deprecated text first
        * @deprecated text second
        */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('text first')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('text second'))])]);
        (yield ['OK with long descriptions', '/** @deprecated in Drupal 8.6.0 and will be removed before Drupal 9.0.0. In
			*   Drupal 9 there will be no way to set the status and in Drupal 8 this
			*   ability has been removed because mb_*() functions are supplied using
			*   Symfony\'s polyfill. */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('in Drupal 8.6.0 and will be removed before Drupal 9.0.0. In
Drupal 9 there will be no way to set the status and in Drupal 8 this
ability has been removed because mb_*() functions are supplied using
Symfony\'s polyfill.'))])]);
        (yield ['OK with multiple and long descriptions', '/**
      * Sample class
      *
      * @author Foo Baz <foo@baz.com>
      *
      * @deprecated in Drupal 8.6.0 and will be removed before Drupal 9.0.0. In
			*   Drupal 9 there will be no way to set the status and in Drupal 8 this
			*   ability has been removed because mb_*() functions are supplied using
			*   Symfony\'s polyfill.
			*/', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Sample class'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@author', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode('Foo Baz <foo@baz.com>')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@deprecated', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\DeprecatedTagValueNode('in Drupal 8.6.0 and will be removed before Drupal 9.0.0. In
Drupal 9 there will be no way to set the status and in Drupal 8 this
ability has been removed because mb_*() functions are supplied using
Symfony\'s polyfill.'))])]);
    }
    public function provideMethodTagsData() : \Iterator
    {
        (yield ['OK non-static, without return type', '/** @method foo() */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, null, 'foo', [], ''))])]);
        (yield ['OK non-static, with return type', '/** @method Foo foo() */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [], ''))])]);
        (yield ['OK non-static, with return static type', '/** @method static foo() */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('static'), 'foo', [], ''))])]);
        (yield ['OK static, with return type', '/** @method static Foo foo() */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [], ''))])]);
        (yield ['OK static, with return static type', '/** @method static static foo() */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('static'), 'foo', [], ''))])]);
        (yield ['OK non-static, with return type and description', '/** @method Foo foo() optional description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [], 'optional description'))])]);
        (yield ['OK non-static, with return type and single parameter without type', '/** @method Foo foo($a) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$a', null)], ''))])]);
        (yield ['OK non-static, with return type and single parameter with type', '/** @method Foo foo(A $a) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), \false, \false, '$a', null)], ''))])]);
        (yield ['OK non-static, with return type and single parameter with type that is passed by reference', '/** @method Foo foo(A &$a) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), \true, \false, '$a', null)], ''))])]);
        (yield ['OK non-static, with return type and single variadic parameter with type', '/** @method Foo foo(A ...$a) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), \false, \true, '$a', null)], ''))])]);
        (yield ['OK non-static, with return type and single variadic parameter with type that is passed by reference', '/** @method Foo foo(A &...$a) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), \true, \true, '$a', null)], ''))])]);
        (yield ['OK non-static, with return type and single parameter with default value', '/** @method Foo foo($a = 123) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$a', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprIntegerNode('123'))], ''))])]);
        (yield ['OK non-static, with return type and single variadic parameter with type that is passed by reference and default value', '/** @method Foo foo(A &...$a = 123) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), \true, \true, '$a', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprIntegerNode('123'))], ''))])]);
        (yield ['OK non-static, with return type and multiple parameters without type', '/** @method Foo foo($a, $b, $c) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'foo', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$b', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$c', null)], ''))])]);
        (yield ['invalid non-static method without parentheses', '/** @method a b */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('a b', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 16, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OPEN_PARENTHESES)))])]);
        (yield ['invalid static method without parentheses', '/** @method static a b */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('static a b', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 23, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OPEN_PARENTHESES)))])]);
        (yield ['invalid non-static method without parameter name', '/** @method a b(x) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('a b(x)', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException(')', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PARENTHESES, 17, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
    }
    public function provideSingleLinePhpDocData() : \Iterator
    {
        (yield ['empty', '/** */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([])]);
        (yield ['edge-case', '/** /**/', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('/*')])]);
        (yield ['single text node', '/** text */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('text')])]);
        (yield ['single text node with tag in the middle', '/** text @foo bar */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('text @foo bar')])]);
        (yield ['single tag node without value', '/** @foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode(''))])]);
        (yield ['single tag node with value', '/** @foo lorem ipsum */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode('lorem ipsum'))])]);
        (yield ['single tag node with tag in the middle of value', '/** @foo lorem @bar ipsum */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode('lorem @bar ipsum'))])]);
        (yield ['single tag node without space between tag name and its value', '/** @varFoo $foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@varFoo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode('$foo'))])]);
        (yield ['callable with space between keyword and parameters', '/** @var callable (int): void */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\CallableTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('callable'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\CallableTypeParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '', \false)], new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void')), '', ''))])]);
        (yield ['callable with description in parentheses', '/** @var callable (int) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('callable'), '', '(int)'))])]);
        (yield ['callable with incomplete signature without return type', '/** @var callable(int) */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@var', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\VarTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('callable'), '', '(int)'))])]);
    }
    public function provideMultiLinePhpDocData() : array
    {
        return [['multi-line with two tags', '/**
				  * @param Foo $foo 1st multi world description
				  * @param Bar $bar 2nd multi world description
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \false, '$foo', '1st multi world description')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar'), \false, '$bar', '2nd multi world description'))])], ['multi-line with two tags and text in the middle', '/**
				  * @param Foo $foo 1st multi world description
				  * some text in the middle
				  * @param Bar $bar 2nd multi world description
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \false, '$foo', '1st multi world description
some text in the middle')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar'), \false, '$bar', '2nd multi world description'))])], ['multi-line with two tags, text in the middle and some empty lines', '/**
				  *
				  *
				  * @param Foo $foo 1st multi world description with empty lines
				  *
				  *
				  * some text in the middle
				  *
				  *
				  * @param Bar $bar 2nd multi world description with empty lines
				  *
				  *
				  * test
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), \false, '$foo', '1st multi world description with empty lines')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('some text in the middle'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar'), \false, '$bar', '2nd multi world description with empty lines')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('test')])], ['multi-line with just empty lines', '/**
				  *
				  *
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('')])], ['multi-line with tag mentioned as part of text node', '/**
				  * Lets talk about @param
				  * @param int $foo @param string $bar
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Lets talk about @param'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, '$foo', '@param string $bar'))])], ['multi-line with a lot of @method tags', '/**
				  * @method int getInteger(int $a, int $b)
				  * @method void doSomething(int $a, $b)
				  * @method self|Bar getFooOrBar()
				  * @method methodWithNoReturnType()
				  * @method static int getIntegerStatically(int $a, int $b)
				  * @method static void doSomethingStatically(int $a, $b)
				  * @method static self|Bar getFooOrBarStatically()
				  * @method static methodWithNoReturnTypeStatically()
				  * @method int getIntegerWithDescription(int $a, int $b) Get an integer with a description.
				  * @method void doSomethingWithDescription(int $a, $b) Do something with a description.
				  * @method self|Bar getFooOrBarWithDescription() Get a Foo or a Bar with a description.
				  * @method methodWithNoReturnTypeWithDescription() Do something with a description but what, who knows!
				  * @method static int getIntegerStaticallyWithDescription(int $a, int $b) Get an integer with a description statically.
				  * @method static void doSomethingStaticallyWithDescription(int $a, $b) Do something with a description statically.
				  * @method static self|Bar getFooOrBarStaticallyWithDescription() Get a Foo or a Bar with a description statically.
				  * @method static methodWithNoReturnTypeStaticallyWithDescription() Do something with a description statically, but what, who knows!
				  * @method static bool aStaticMethodThatHasAUniqueReturnTypeInThisClass()
				  * @method static string aStaticMethodThatHasAUniqueReturnTypeInThisClassWithDescription() A Description.
				  * @method int getIntegerNoParams()
				  * @method void doSomethingNoParams()
				  * @method self|Bar getFooOrBarNoParams()
				  * @method methodWithNoReturnTypeNoParams()
				  * @method static int getIntegerStaticallyNoParams()
				  * @method static void doSomethingStaticallyNoParams()
				  * @method static self|Bar getFooOrBarStaticallyNoParams()
				  * @method static methodWithNoReturnTypeStaticallyNoParams()
				  * @method int getIntegerWithDescriptionNoParams() Get an integer with a description.
				  * @method void doSomethingWithDescriptionNoParams() Do something with a description.
				  * @method self|Bar getFooOrBarWithDescriptionNoParams() Get a Foo or a Bar with a description.
				  * @method static int getIntegerStaticallyWithDescriptionNoParams() Get an integer with a description statically.
				  * @method static void doSomethingStaticallyWithDescriptionNoParams() Do something with a description statically.
				  * @method static self|Bar getFooOrBarStaticallyWithDescriptionNoParams() Get a Foo or a Bar with a description statically.
				  * @method static bool|string aStaticMethodThatHasAUniqueReturnTypeInThisClassNoParams()
				  * @method static string|float aStaticMethodThatHasAUniqueReturnTypeInThisClassWithDescriptionNoParams() A Description.
				  * @method \\Aws\\Result publish(array $args)
				  * @method Image rotate(float & ... $angle = array(), $backgroundColor)
				  * @method Foo overridenMethod()
				  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getInteger', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$b', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomething', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$b', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBar', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, null, 'methodWithNoReturnType', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerStatically', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$b', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingStatically', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$b', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarStatically', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('static'), 'methodWithNoReturnTypeStatically', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerWithDescription', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$b', null)], 'Get an integer with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingWithDescription', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$b', null)], 'Do something with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarWithDescription', [], 'Get a Foo or a Bar with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, null, 'methodWithNoReturnTypeWithDescription', [], 'Do something with a description but what, who knows!')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerStaticallyWithDescription', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$b', null)], 'Get an integer with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingStaticallyWithDescription', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), \false, \false, '$a', null), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$b', null)], 'Do something with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarStaticallyWithDescription', [], 'Get a Foo or a Bar with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('static'), 'methodWithNoReturnTypeStaticallyWithDescription', [], 'Do something with a description statically, but what, who knows!')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('bool'), 'aStaticMethodThatHasAUniqueReturnTypeInThisClass', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('string'), 'aStaticMethodThatHasAUniqueReturnTypeInThisClassWithDescription', [], 'A Description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, null, 'methodWithNoReturnTypeNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerStaticallyNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingStaticallyNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarStaticallyNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('static'), 'methodWithNoReturnTypeStaticallyNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerWithDescriptionNoParams', [], 'Get an integer with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingWithDescriptionNoParams', [], 'Do something with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarWithDescriptionNoParams', [], 'Get a Foo or a Bar with a description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int'), 'getIntegerStaticallyWithDescriptionNoParams', [], 'Get an integer with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('void'), 'doSomethingStaticallyWithDescriptionNoParams', [], 'Do something with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('self'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Bar')]), 'getFooOrBarStaticallyWithDescriptionNoParams', [], 'Get a Foo or a Bar with a description statically.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('bool'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('string')]), 'aStaticMethodThatHasAUniqueReturnTypeInThisClassNoParams', [], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\true, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('string'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('float')]), 'aStaticMethodThatHasAUniqueReturnTypeInThisClassWithDescriptionNoParams', [], 'A Description.')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('TenantCloud\\BetterReflection\\Relocated\\Aws\\Result'), 'publish', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('array'), \false, \false, '$args', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Image'), 'rotate', [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('float'), \true, \true, '$angle', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprArrayNode([])), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueParameterNode(null, \false, \false, '$backgroundColor', null)], '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@method', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MethodTagValueNode(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), 'overridenMethod', [], ''))])]];
    }
    public function provideTemplateTagsData() : \Iterator
    {
        (yield ['OK without bound and description', '/** @template T */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', null, ''))])]);
        (yield ['OK without bound', '/** @template T the value type*/', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', null, 'the value type'))])]);
        (yield ['OK without description', '/** @template T of DateTime */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('DateTime'), ''))])]);
        (yield ['OK without description', '/** @template T as DateTime */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('DateTime'), ''))])]);
        (yield ['OK with bound and description', '/** @template T of DateTime the value type */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('DateTime'), 'the value type'))])]);
        (yield ['OK with bound and description', '/** @template T as DateTime the value type */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('DateTime'), 'the value type'))])]);
        (yield ['invalid without bound and description', '/** @template */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without bound and with description', '/** @template #desc */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('#desc', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('#desc', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OTHER, 14, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['OK with covariance', '/** @template-covariant T */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@template-covariant', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TemplateTagValueNode('T', null, ''))])]);
    }
    public function provideExtendsTagsData() : \Iterator
    {
        (yield ['OK with one argument', '/** @extends Foo<A> */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@extends', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ExtendsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A')]), ''))])]);
        (yield ['OK with two arguments', '/** @extends Foo<A,B> */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@extends', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ExtendsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
        (yield ['OK @implements', '/** @implements Foo<A,B> */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@implements', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ImplementsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
        (yield ['OK @use', '/** @use Foo<A,B> */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@use', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\UsesTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
        (yield ['OK with description', '/** @extends Foo<A> extends foo*/', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@extends', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ExtendsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A')]), 'extends foo'))])]);
        (yield ['invalid without type', '/** @extends */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@extends', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 13, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid without arguments', '/** @extends Foo */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@extends', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 17, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_OPEN_ANGLE_BRACKET)))])]);
        (yield ['class-string in @return', '/** @return class-string */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('class-string'), ''))])]);
        (yield ['class-string in @return with description', '/** @return class-string some description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('class-string'), 'some description'))])]);
        (yield ['class-string in @param', '/** @param class-string $test */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('class-string'), \false, '$test', ''))])]);
        (yield ['class-string in @param with description', '/** @param class-string $test some description */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('class-string'), \false, '$test', 'some description'))])]);
    }
    public function provideTypeAliasTagsData() : \Iterator
    {
        (yield ['OK', '/** @phpstan-type TypeAlias string|int */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('string'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int')])))])]);
        (yield ['OK with psalm syntax', '/** @psalm-type TypeAlias=string|int */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@psalm-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('string'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('int')])))])]);
        (yield ['invalid without type', '/** @phpstan-type TypeAlias */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 28, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid empty', '/** @phpstan-type */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 18, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
    }
    public function provideTypeAliasImportTagsData() : \Iterator
    {
        (yield ['OK', '/** @phpstan-import-type TypeAlias from AnotherClass */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-import-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasImportTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('AnotherClass'), null))])]);
        (yield ['OK with alias', '/** @phpstan-import-type TypeAlias from AnotherClass as DifferentAlias */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-import-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\TypeAliasImportTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('AnotherClass'), 'DifferentAlias'))])]);
        (yield ['invalid missing from', '/** @phpstan-import-type TypeAlias */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-import-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('TypeAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 35, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid missing from with alias', '/** @phpstan-import-type TypeAlias as DifferentAlias */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-import-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('TypeAlias as DifferentAlias', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('as', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER, 35, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
        (yield ['invalid empty', '/** @phpstan-import-type */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@phpstan-import-type', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*/', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_CLOSE_PHPDOC, 25, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_IDENTIFIER)))])]);
    }
    public function providerDebug() : \Iterator
    {
        $sample = '/**
			 * Returns the schema for the field.
			 *
			 * This method is static because the field schema information is needed on
			 * creation of the field. FieldItemInterface objects instantiated at that
			 * time are not reliable as field settings might be missing.
			 *
			 * Computed fields having no schema should return an empty array.
			 */';
        (yield ['OK class line', $sample, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Returns the schema for the field.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('This method is static because the field schema information is needed on
creation of the field. FieldItemInterface objects instantiated at that
time are not reliable as field settings might be missing.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Computed fields having no schema should return an empty array.')])]);
    }
    public function provideRealWorldExampleData() : \Iterator
    {
        $sample = "/**\n\t\t\t * Returns the schema for the field.\n\t\t\t *\n\t\t\t * This method is static because the field schema information is needed on\n\t\t\t * creation of the field. FieldItemInterface objects instantiated at that\n\t\t\t * time are not reliable as field settings might be missing.\n\t\t\t *\n\t\t\t * Computed fields having no schema should return an empty array.\n\t\t\t *\n\t\t\t * @param \\Drupal\\Core\\Field\\FieldStorageDefinitionInterface \$field_definition\n\t\t\t *   The field definition.\n\t\t\t *\n\t\t\t * @return array\n\t\t\t *   An empty array if there is no schema, or an associative array with the\n\t\t\t *   following key/value pairs:\n\t\t\t *   - columns: An array of Schema API column specifications, keyed by column\n\t\t\t *     name. The columns need to be a subset of the properties defined in\n\t\t\t *     propertyDefinitions(). The 'not null' property is ignored if present,\n\t\t\t *     as it is determined automatically by the storage controller depending\n\t\t\t *     on the table layout and the property definitions. It is recommended to\n\t\t\t *     avoid having the column definitions depend on field settings when\n\t\t\t *     possible. No assumptions should be made on how storage engines\n\t\t\t *     internally use the original column name to structure their storage.\n\t\t\t *   - unique keys: (optional) An array of Schema API unique key definitions.\n\t\t\t *     Only columns that appear in the 'columns' array are allowed.\n\t\t\t *   - indexes: (optional) An array of Schema API index definitions. Only\n\t\t\t *     columns that appear in the 'columns' array are allowed. Those indexes\n\t\t\t *     will be used as default indexes. Field definitions can specify\n\t\t\t *     additional indexes or, at their own risk, modify the default indexes\n\t\t\t *     specified by the field-type module. Some storage engines might not\n\t\t\t *     support indexes.\n\t\t\t *   - foreign keys: (optional) An array of Schema API foreign key\n\t\t\t *     definitions. Note, however, that the field data is not necessarily\n\t\t\t *     stored in SQL. Also, the possible usage is limited, as you cannot\n\t\t\t *     specify another field as related, only existing SQL tables,\n\t\t\t *     such as {taxonomy_term_data}.\n\t\t\t */";
        (yield ['OK FieldItemInterface::schema', $sample, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Returns the schema for the field.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('This method is static because the field schema information is needed on
creation of the field. FieldItemInterface objects instantiated at that
time are not reliable as field settings might be missing.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Computed fields having no schema should return an empty array.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('TenantCloud\\BetterReflection\\Relocated\\Drupal\\Core\\Field\\FieldStorageDefinitionInterface'), \false, '$field_definition', '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('The field definition.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('array'), '')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('An empty array if there is no schema, or an associative array with the
following key/value pairs:'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- columns: An array of Schema API column specifications, keyed by column
name. The columns need to be a subset of the properties defined in
propertyDefinitions(). The \'not null\' property is ignored if present,
as it is determined automatically by the storage controller depending
on the table layout and the property definitions. It is recommended to
avoid having the column definitions depend on field settings when
possible. No assumptions should be made on how storage engines
internally use the original column name to structure their storage.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- unique keys: (optional) An array of Schema API unique key definitions.
Only columns that appear in the \'columns\' array are allowed.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- indexes: (optional) An array of Schema API index definitions. Only
columns that appear in the \'columns\' array are allowed. Those indexes
will be used as default indexes. Field definitions can specify
additional indexes or, at their own risk, modify the default indexes
specified by the field-type module. Some storage engines might not
support indexes.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- foreign keys: (optional) An array of Schema API foreign key
definitions. Note, however, that the field data is not necessarily
stored in SQL. Also, the possible usage is limited, as you cannot
specify another field as related, only existing SQL tables,
such as {taxonomy_term_data}.')])]);
        $sample = '/**
     *  Parses a chunked request and return relevant information.
     *
     *  This function must return an array containing the following
     *  keys and their corresponding values:
     *    - last: Wheter this is the last chunk of the uploaded file
     *    - uuid: A unique id which distinguishes two uploaded files
     *            This uuid must stay the same among the task of
     *            uploading a chunked file.
     *    - index: A numerical representation of the currently uploaded
     *            chunk. Must be higher that in the previous request.
     *    - orig: The original file name.
     *
     * @param Request $request - The request object
     *
     * @return array
     */';
        (yield ['OK AbstractChunkedController::parseChunkedRequest', $sample, new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('Parses a chunked request and return relevant information.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('This function must return an array containing the following
keys and their corresponding values:'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- last: Wheter this is the last chunk of the uploaded file'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- uuid: A unique id which distinguishes two uploaded files
This uuid must stay the same among the task of
uploading a chunked file.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- index: A numerical representation of the currently uploaded
chunk. Must be higher that in the previous request.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode('- orig: The original file name.'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Request'), \false, '$request', '- The request object')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTextNode(''), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('array'), ''))])]);
        (yield ['string literals in @return', "/** @return 'foo'|'bar' */", new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\UnionTypeNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ConstTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprStringNode('foo')), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ConstTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstExprStringNode('bar'))]), ''))])]);
        (yield ['malformed const fetch', '/** @param Foo::** $a */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@param', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\InvalidTagValueNode('Foo::** $a', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\ParserException('*', \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_WILDCARD, 17, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_VARIABLE)))])]);
        (yield ['multiline generic types', '/**' . \PHP_EOL . ' * @implements Foo<' . \PHP_EOL . ' *    A, B' . \PHP_EOL . ' * >' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@implements', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ImplementsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
        (yield ['multiline generic types - leading comma', '/**' . \PHP_EOL . ' * @implements Foo<' . \PHP_EOL . ' *    A' . \PHP_EOL . ' *    , B' . \PHP_EOL . ' * >' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@implements', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ImplementsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
        (yield ['multiline generic types - traling comma', '/**' . \PHP_EOL . ' * @implements Foo<' . \PHP_EOL . ' *    A,' . \PHP_EOL . ' *    B,' . \PHP_EOL . ' * >' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@implements', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ImplementsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('B')]), ''))])]);
    }
    public function provideDescriptionWithOrWithoutHtml() : \Iterator
    {
        (yield ['Description with HTML tags in @return tag (close tags together)', '/**' . \PHP_EOL . ' * @return Foo <strong>Important <i>description</i></strong>' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), '<strong>Important <i>description</i></strong>'))])]);
        (yield ['Description with HTML tags in @throws tag (closed tags with text between)', '/**' . \PHP_EOL . ' * @throws FooException <strong>Important <em>description</em> etc</strong>' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@throws', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ThrowsTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('FooException'), '<strong>Important <em>description</em> etc</strong>'))])]);
        (yield ['Description with HTML tags in @mixin tag', '/**' . \PHP_EOL . ' * @mixin Mixin <strong>Important description</strong>' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@mixin', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\MixinTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Mixin'), '<strong>Important description</strong>'))])]);
        (yield ['Description with unclosed HTML tags in @return tag - unclosed HTML tag is parsed as generics', '/**' . \PHP_EOL . ' * @return Foo <strong>Important description' . \PHP_EOL . ' */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@return', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ReturnTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\GenericTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('Foo'), [new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\IdentifierTypeNode('strong')]), 'Important description'))])]);
    }
    public function dataParseTagValue() : array
    {
        return [['@param', 'DateTimeImmutable::ATOM $a', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\ParamTagValueNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Type\ConstTypeNode(new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\ConstExpr\ConstFetchNode('DateTimeImmutable', 'ATOM')), \false, '$a', '')]];
    }
    public function provideTagsWithNumbers() : \Iterator
    {
        (yield ['OK without description and tag with number in it', '/** @special3 Foo  */', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocNode([new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagNode('@special3', new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\PhpDoc\GenericTagValueNode('Foo'))])]);
    }
    /**
     * @dataProvider dataParseTagValue
     * @param string $tag
     * @param string $phpDoc
     * @param PhpDocNode $expectedPhpDocNode
     * @param int $nextTokenType
     */
    public function testParseTagValue(string $tag, string $phpDoc, \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Ast\Node $expectedPhpDocNode, int $nextTokenType = \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Lexer\Lexer::TOKEN_END) : void
    {
        $tokens = new \TenantCloud\BetterReflection\Relocated\PHPStan\PhpDocParser\Parser\TokenIterator($this->lexer->tokenize($phpDoc));
        $actualPhpDocNode = $this->phpDocParser->parseTagValue($tokens, $tag);
        $this->assertEquals($expectedPhpDocNode, $actualPhpDocNode);
        $this->assertSame((string) $expectedPhpDocNode, (string) $actualPhpDocNode);
        $this->assertSame($nextTokenType, $tokens->currentTokenType());
    }
}
