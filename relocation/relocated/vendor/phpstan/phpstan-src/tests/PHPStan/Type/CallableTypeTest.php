<?php

declare (strict_types=1);
namespace TenantCloud\BetterReflection\Relocated\PHPStan\Type;

use TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection;
use TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference;
use TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance;
class CallableTypeTest extends \TenantCloud\BetterReflection\Relocated\PHPStan\Testing\TestCase
{
    public function dataIsSuperTypeOf() : array
    {
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('format'), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__invoke'), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()]];
    }
    /**
     * @dataProvider dataIsSuperTypeOf
     * @param CallableType $type
     * @param Type $otherType
     * @param TrinaryLogic $expectedResult
     */
    public function testIsSuperTypeOf(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType $type, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $otherType, \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic $expectedResult) : void
    {
        $actualResult = $type->isSuperTypeOf($otherType);
        $this->assertSame($expectedResult->describe(), $actualResult->describe(), \sprintf('%s -> isSuperTypeOf(%s)', $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()), $otherType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise())));
    }
    public function dataIsSubTypeOf() : array
    {
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createNo()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createNo()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createNo()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Unknown')]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('foo'), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__invoke'), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createMaybe()]];
    }
    /**
     * @dataProvider dataIsSubTypeOf
     * @param CallableType $type
     * @param Type $otherType
     * @param TrinaryLogic $expectedResult
     */
    public function testIsSubTypeOf(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType $type, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $otherType, \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic $expectedResult) : void
    {
        $actualResult = $type->isSubTypeOf($otherType);
        $this->assertSame($expectedResult->describe(), $actualResult->describe(), \sprintf('%s -> isSubTypeOf(%s)', $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()), $otherType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise())));
    }
    /**
     * @dataProvider dataIsSubTypeOf
     * @param CallableType $type
     * @param Type $otherType
     * @param TrinaryLogic $expectedResult
     */
    public function testIsSubTypeOfInversed(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType $type, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $otherType, \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic $expectedResult) : void
    {
        $actualResult = $otherType->isSuperTypeOf($type);
        $this->assertSame($expectedResult->describe(), $actualResult->describe(), \sprintf('%s -> isSuperTypeOf(%s)', $otherType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()), $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise())));
    }
    public function dataInferTemplateTypes() : array
    {
        $param = static function (\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type) : NativeParameterReflection {
            return new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('', \false, $type, \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null);
        };
        $templateType = static function (string $name) : Type {
            return \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), $name, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant());
        };
        return ['template param' => [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param($templateType('T'))], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), ['T' => 'string']], 'template return' => [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], $templateType('T')), ['T' => 'int']], 'multiple templates' => [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), $param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'))], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), $param($templateType('A'))], $templateType('B')), ['A' => 'DateTime', 'B' => 'int']], 'receive union' => [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), $param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'))], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), $param($templateType('A'))], $templateType('B')), ['A' => 'DateTime', 'B' => 'int']], 'receive non-accepted' => [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([$param(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), $param($templateType('A'))], $templateType('B')), []]];
    }
    /**
     * @dataProvider dataInferTemplateTypes
     * @param array<string,string> $expectedTypes
     */
    public function testResolveTemplateTypes(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $received, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $template, array $expectedTypes) : void
    {
        $result = $template->inferTemplateTypes($received);
        $this->assertSame($expectedTypes, \array_map(static function (\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type) : string {
            return $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        }, $result->getTypes()));
    }
    public function dataAccepts() : array
    {
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null), new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('bar', \true, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null), new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('bar', \true, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null), new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('bar', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('foo', \false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null), new \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\Native\NativeParameterReflection('bar', \true, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Reflection\PassedByReference::createNo(), \false, null)], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createNo()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \false), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Closure::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bind')]), \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic::createYes()]];
    }
    /**
     * @dataProvider dataAccepts
     * @param \PHPStan\Type\CallableType $type
     * @param Type $acceptedType
     * @param TrinaryLogic $expectedResult
     */
    public function testAccepts(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType $type, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $acceptedType, \TenantCloud\BetterReflection\Relocated\PHPStan\TrinaryLogic $expectedResult) : void
    {
        $this->assertSame($expectedResult->describe(), $type->accepts($acceptedType, \true)->describe(), \sprintf('%s -> accepts(%s)', $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()), $acceptedType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise())));
    }
}
