<?php

declare (strict_types=1);
namespace TenantCloud\BetterReflection\Relocated\PHPStan\Type;

use TenantCloud\BetterReflection\Relocated\PHPStan\Broker\Broker;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\AccessoryNumericStringType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateObjectType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateObjectWithoutClassType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateType;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope;
use TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance;
class TypeCombinatorTest extends \TenantCloud\BetterReflection\Relocated\PHPStan\Testing\TestCase
{
    public function dataAddNull() : array
    {
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType::class, 'null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\VoidType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'void|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'string|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(ArrayObject&iterable<string>)|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(ArrayObject&iterable<string>)|null']];
    }
    /**
     * @dataProvider dataAddNull
     * @param \PHPStan\Type\Type $type
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testAddNull(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $result = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::addNull($type);
        $this->assertSame($expectedTypeDescription, $result->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()));
        $this->assertInstanceOf($expectedTypeClass, $result);
    }
    /**
     * @dataProvider dataAddNull
     * @param \PHPStan\Type\Type $type
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testUnionWithNull(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $result = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union($type, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType());
        $this->assertSame($expectedTypeDescription, $result->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()));
        $this->assertInstanceOf($expectedTypeClass, $result);
    }
    public function dataRemoveNull() : array
    {
        $reflectionProvider = \TenantCloud\BetterReflection\Relocated\PHPStan\Broker\Broker::getInstance();
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\VoidType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\VoidType::class, 'void'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'ArrayObject&iterable<string>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'ArrayObject&iterable<string>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ThisType($reflectionProvider->getClass(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ThisType::class, '$this(Exception)'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ThisType(\Exception::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ThisType::class, '$this(Exception)'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<string>']];
    }
    /**
     * @dataProvider dataRemoveNull
     * @param \PHPStan\Type\Type $type
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testRemoveNull(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $result = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::removeNull($type);
        $this->assertSame($expectedTypeDescription, $result->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()));
        $this->assertInstanceOf($expectedTypeClass, $result);
    }
    public function dataUnion() : array
    {
        return [[[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'string|null'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType::class, 'bool'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string|true'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string|null'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string|null'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(ArrayObject&iterable<int>)|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<string>|(ArrayObject&iterable<int>)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<string>|int|true'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Bar'))]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayIterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<string>|ArrayIterator|ArrayObject'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayIterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<int|string>|ArrayIterator|ArrayObject'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<int>|(ArrayObject&iterable<int>)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'UnknownClass'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTimeInterface'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Traversable')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTimeInterface'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Traversable')])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'DateTimeInterface&Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'UnknownClass'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'ArrayObject&iterable<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<int|string, int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<int|string, int|string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Unknown'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'string|Unknown|null'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\RecursionCallable\Foo::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'TenantCloud\\BetterReflection\\Relocated\\(callable(): mixed)|RecursionCallable\\Foo'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType::class, '1'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(2)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '1|2'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType(1.0)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType::class, 'float'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType(1.0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType(1.0)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType::class, '1.0'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType(1.0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantFloatType(2.0)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '1.0|2.0'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('A')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('A')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'A\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('A'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('B')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '\'A\'|\'B\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType::class, 'bool'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType::class, 'bool'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Closure::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Closure'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType::class, 'callable(): mixed'], [
            // same keys - can remain ConstantArrayType
            [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])],
            \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class,
            'array(\'foo\' => DateTimeImmutable|null, \'bar\' => int|string)',
        ], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'foo\' => DateTimeImmutable|null, ?\'bar\' => int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('baz')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'foo\' => DateTimeImmutable|null, \'bar\' => int|string, ?\'baz\' => int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<\'bar\'|\'foo\'|int, DateTimeImmutable|int|stdClass>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('baz'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('lorem')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, "'bar'|'baz'|'foo'|'lorem'"], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('fooo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('barr'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('baz'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bazz'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('lorem'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('loremm'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('loremmm')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array<string>&hasOffset(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('foo')])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasProperty(foo)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array(object, \'foo\')&callable(): mixed'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], [])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'))]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'))]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'))])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'))]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'))])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&hasOffset(\'foo\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~int=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~1=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(2)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~1=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('A'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('A'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('A')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('A'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~A=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Throwable')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('InvalidArgumentException')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'DateTime|T (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'DateTime'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateType::class, 'T of DateTime (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'U', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'T of DateTime (function a(), parameter)|U of DateTime (function a(), parameter)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(2)])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(2), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\FloatType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'float|int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType::class, 'class-string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('Nonexistent')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '\'Nonexistent\'|class-string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'class-string|int'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType::class, 'class-string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Throwable::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Throwable>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\InvalidArgumentException::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'class-string<Exception>|class-string<stdClass>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Throwable::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Throwable>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\InvalidArgumentException::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '\'Exception\'|class-string<InvalidArgumentException>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '\'stdClass\'|class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('test_function')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '\'test_function\'|(callable(): mixed&string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(callable(): mixed&string)|int'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(2, 5)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, 5>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 2), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 5)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, 5>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(7, 9)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int<1, 3>|int<7, 9>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(7, 9), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int<1, 3>|int<7, 9>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(3)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, 3>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(4)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, 4>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(5)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '5|int<1, 3>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(null, 1), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, null)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(2)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=explicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Invariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Invariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class)])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType::class, 'PHPStan\\Type\\Variance\\Invariant<DateTimeInterface>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Invariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Invariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTime::class)])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'PHPStan\\Type\\Variance\\Invariant<DateTime>|PHPStan\\Type\\Variance\\Invariant<DateTimeInterface>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Covariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Covariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTime::class)])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType::class, 'PHPStan\\Type\\Variance\\Covariant<DateTimeInterface>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType::class, 'object'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'stdClass|T of object (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'K', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'K (function a(), parameter)|T (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'K', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'K of object (function a(), parameter)|T of object (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'K', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'K of stdClass (function a(), parameter)|T of Exception (function a(), parameter)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeImmutable::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, \DateTimeInterface::class], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array()|array(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], 1, [0])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array()|array(?0 => string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('c'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('d')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array(\'a\' => int, \'b\' => int)|array(\'c\' => int, \'d\' => int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'a\' => int, ?\'b\' => int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('c')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array(\'a\' => int, \'b\' => int)|array(\'b\' => int, \'c\' => int)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'string&hasOffset(int)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('abc'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('abc'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, '\'abc\'&hasOffset(int)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '0|0.0|\'\'|\'0\'|array()|false|null'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~0|0.0|\'\'|\'0\'|array()|false|null=implicit'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit']];
    }
    /**
     * @dataProvider dataUnion
     * @param \PHPStan\Type\Type[] $types
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testUnion(array $types, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $actualType = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(...$types);
        $actualTypeDescription = $actualType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        if ($actualType instanceof \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType) {
            if ($actualType->isExplicitMixed()) {
                $actualTypeDescription .= '=explicit';
            } else {
                $actualTypeDescription .= '=implicit';
            }
        }
        $this->assertSame($expectedTypeDescription, $actualTypeDescription, \sprintf('union(%s)', \implode(', ', \array_map(static function (\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type) : string {
            return $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        }, $types))));
        $this->assertInstanceOf($expectedTypeClass, $actualType);
        $hasSubtraction = \false;
        foreach ($types as $type) {
            if (!$type instanceof \TenantCloud\BetterReflection\Relocated\PHPStan\Type\SubtractableType || $type->getSubtractedType() === null) {
                continue;
            }
            $hasSubtraction = \true;
        }
        if ($hasSubtraction) {
            return;
        }
    }
    /**
     * @dataProvider dataUnion
     * @param \PHPStan\Type\Type[] $types
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testUnionInversed(array $types, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $types = \array_reverse($types);
        $actualType = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(...$types);
        $actualTypeDescription = $actualType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        if ($actualType instanceof \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType) {
            if ($actualType->isExplicitMixed()) {
                $actualTypeDescription .= '=explicit';
            } else {
                $actualTypeDescription .= '=implicit';
            }
        }
        $this->assertSame($expectedTypeDescription, $actualTypeDescription, \sprintf('union(%s)', \implode(', ', \array_map(static function (\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type) : string {
            return $type->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        }, $types))));
        $this->assertInstanceOf($expectedTypeClass, $actualType);
    }
    public function dataIntersect() : array
    {
        return [[[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'ArrayObject&iterable<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Iterator')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'iterable<string>&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Iterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('_'), 'T', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'iterable<T (function _(), parameter)>&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticType('Foo')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticType::class, 'static(Foo)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\VoidType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\VoidType::class, 'void'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClass')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'UnknownClass'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClassA'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClassB')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClassA'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('UnknownClassB')])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'UnknownClassA|UnknownClassB'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Iterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Countable'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Traversable')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'Countable&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Iterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Traversable'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Countable')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'Countable&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Traversable'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Iterator'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Countable')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'Countable&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<int, string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array<int, string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable<int, string>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType::class, '1'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'foo\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\Foo::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'Test\\Foo&hasMethod(__toString)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\ClassWithToString::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'TenantCloud\\BetterReflection\\Relocated\\Test\\ClassWithToString'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\CheckTypeFunctionCall\FinalClassWithMethodExists::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('doBar')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasMethod(__toString)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasMethod(__toString)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('bar')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasMethod(bar)&hasMethod(foo)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\Foo::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\FirstInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasMethodType('__toString')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(Test\\FirstInterface&hasMethod(__toString))|(Test\\Foo&hasMethod(__toString))'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\Foo::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'Test\\Foo&hasProperty(fooProperty)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\ClassWithNullableProperty::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('foo')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'TenantCloud\\BetterReflection\\Relocated\\Test\\ClassWithNullableProperty'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\CheckTypeFunctionCall\FinalClassWithPropertyExists::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('barProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasProperty(fooProperty)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasProperty(fooProperty)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('bar')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'object&hasProperty(bar)&hasProperty(foo)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\Foo::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\TenantCloud\BetterReflection\Relocated\Test\FirstInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasPropertyType('fooProperty')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '(Test\\FirstInterface&hasProperty(fooProperty))|(Test\\Foo&hasProperty(fooProperty))'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array<string, string>&hasOffset(\'a\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array<string, string>&hasOffset(\'a\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array<string, string>&hasOffset(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&hasOffset(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'a\' => \'foo\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')])), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'b\' => \'foo\')'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'a\' => \'foo\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Closure::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType::class, 'Closure(): mixed'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\CallableType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType::class, 'Closure(): mixed'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType([], new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClosureType::class, 'Closure(): mixed'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array<string>&hasOffset(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&nonEmpty'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&nonEmpty'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'))]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('bar'))])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&hasOffset(\'bar\')&hasOffset(\'foo\')'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType::class, '1'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~int|string=implicit'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'DateTime&T (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateObjectType::class, 'T of DateTime (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateType::class, 'T of DateTime (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'U', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('DateTime'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'T of DateTime (function a(), parameter)&U of DateTime (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', null, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateType::class, 'T (function a(), parameter)=explicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType::class, 'class-string'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'stdClass\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('Nonexistent')], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'Exception\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Throwable::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<Exception>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\InvalidArgumentException::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType::class, 'class-string<InvalidArgumentException>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'Exception\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Throwable::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'Exception\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\InvalidArgumentException::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\Exception::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericClassStringType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Exception::class)), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(2, 5)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<2, 3>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 5)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType::class, '3'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(7, 9)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(3)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType::class, '3'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(4)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, 3), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, 3>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'iterable&Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'iterable&Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'iterable&Traversable'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=implicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=explicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\true)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed=explicit'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Covariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Variance\Covariant::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTime::class)])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType::class, 'PHPStan\\Type\\Variance\\Covariant<DateTime>'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateObjectWithoutClassType::class, 'T of object (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'stdClass&T of object (function a(), parameter)'], [[\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeFactory::create(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeScope::createWithFunction('a'), 'T', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateTypeVariance::createInvariant()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\TemplateObjectWithoutClassType::class, 'T of object (function a(), parameter)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('NonexistentClass'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType(\stdClass::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ClassStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'stdClass\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Iterator::class)], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'DateTimeInterface&Iterator'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\DateTimeInterface::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Generic\GenericObjectType(\Iterator::class, [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()])], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'DateTimeInterface&Iterator<mixed, mixed>'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('b')], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()], 2, [0]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('a'))], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(\'a\' => int, \'b\' => int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType())], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'string&hasOffset(int)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType::class, '(int|string)'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('abc'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\AccessoryNumericStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('123'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\AccessoryNumericStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType::class, '\'123\''], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\AccessoryNumericStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'string&numeric'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\AccessoryNumericStringType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType()], \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*']];
    }
    /**
     * @dataProvider dataIntersect
     * @param \PHPStan\Type\Type[] $types
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testIntersect(array $types, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $actualType = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(...$types);
        $actualTypeDescription = $actualType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        if ($actualType instanceof \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType) {
            if ($actualType->isExplicitMixed()) {
                $actualTypeDescription .= '=explicit';
            } else {
                $actualTypeDescription .= '=implicit';
            }
        }
        $this->assertSame($expectedTypeDescription, $actualTypeDescription);
        $this->assertInstanceOf($expectedTypeClass, $actualType);
    }
    /**
     * @dataProvider dataIntersect
     * @param \PHPStan\Type\Type[] $types
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testIntersectInversed(array $types, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $actualType = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::intersect(...\array_reverse($types));
        $actualTypeDescription = $actualType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise());
        if ($actualType instanceof \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType) {
            if ($actualType->isExplicitMixed()) {
                $actualTypeDescription .= '=explicit';
            } else {
                $actualTypeDescription .= '=implicit';
            }
        }
        $this->assertSame($expectedTypeDescription, $actualTypeDescription);
        $this->assertInstanceOf($expectedTypeClass, $actualType);
    }
    public function dataRemove() : array
    {
        return [[new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true)]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Bar')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Bar'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Bar'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Baz')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Foo'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'Bar|Baz'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('ArrayObject')]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'array<string>|ArrayObject'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~0|0.0|\'\'|\'0\'|array()|false|null'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '0|0.0|\'\'|\'0\'|array()|false|null'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::falsey(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'true'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StaticTypeFactory::truthy(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType::class, 'false'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\true), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|false'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BooleanType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantBooleanType(\false), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|true'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NullType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Traversable<mixed, mixed>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Traversable::class), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\Iterator::class), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IterableType::class, 'iterable'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType::class, 'int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int|string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, 'int<min, 0>|int<2, max>|string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\BenevolentUnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType::class, 'array&nonEmpty'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()])), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(string)'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType()]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\NonEmptyArrayType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array()'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntersectionType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('foo'))]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ArrayType::class, 'array'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~int'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~int|string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType::class, 'string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(\false, new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed~string'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('InvalidArgumentException'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Exception~InvalidArgumentException'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('InvalidArgumentException')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('LengthException'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Exception~InvalidArgumentException|LengthException'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Throwable'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('Exception', new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('InvalidArgumentException')), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType('InvalidArgumentException'), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'Exception~InvalidArgumentException'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 7), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(2, 4), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<5, 7>'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 7), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 4), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<5, 7>'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 7), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(5, 7), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<3, 4>'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, 7), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<4, 7>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(null, 7), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<8, max>'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(0, 2), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(-1, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(0, 2), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(0, 3), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(0, 2), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(-1, 2), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(0, 2), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(null, 1), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(4, null), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<min, 1>'], [\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(1, null), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(null, -4), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::class, 'int<1, max>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType([\TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(3, null), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(null, 1)]), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\IntegerRangeType::fromInterval(4, null), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\UnionType::class, '3|int<min, 1>'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], 2), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], 2, [1]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, 'array(string)'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(1)], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType()], 2, [1]), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Accessory\HasOffsetType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType(0)), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType::class, '*NEVER*'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\MixedType::class, 'mixed'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType(), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectWithoutClassType::class, 'object'], [new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType(\stdClass::class), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\NeverType(), \TenantCloud\BetterReflection\Relocated\PHPStan\Type\ObjectType::class, 'stdClass']];
    }
    /**
     * @dataProvider dataRemove
     * @param \PHPStan\Type\Type $fromType
     * @param \PHPStan\Type\Type $type
     * @param class-string<\PHPStan\Type\Type> $expectedTypeClass
     * @param string $expectedTypeDescription
     */
    public function testRemove(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $fromType, \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Type $type, string $expectedTypeClass, string $expectedTypeDescription) : void
    {
        $result = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::remove($fromType, $type);
        $this->assertSame($expectedTypeDescription, $result->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()));
        $this->assertInstanceOf($expectedTypeClass, $result);
    }
    public function testSpecificUnionConstantArray() : void
    {
        $arrays = [];
        for ($i = 0; $i < 5; $i++) {
            $array = new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType([], []);
            for ($j = 0; $j < 5; $j++) {
                $arrays[] = $array = $array->setOffsetValueType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantIntegerType($j), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType());
                if ($i !== $j) {
                    continue;
                }
                $arrays[] = $array = $array->setOffsetValueType(new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantStringType('test'), new \TenantCloud\BetterReflection\Relocated\PHPStan\Type\StringType());
            }
        }
        $resultType = \TenantCloud\BetterReflection\Relocated\PHPStan\Type\TypeCombinator::union(...$arrays);
        $this->assertInstanceOf(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\Constant\ConstantArrayType::class, $resultType);
        $this->assertSame('array(0 => string, ?\'test\' => string, ?1 => string, ?2 => string, ?3 => string, ?4 => string)', $resultType->describe(\TenantCloud\BetterReflection\Relocated\PHPStan\Type\VerbosityLevel::precise()));
    }
}
